daemon off;
user nginx;
worker_processes 1;

error_log /dev/stderr warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  include includes/lua-init.conf;
  default_type application/octet-stream;
  server_names_hash_bucket_size 128;

  # logs
  log_format main  '{ "@timestamp": "$time_iso8601", '
                       '"@fields": { '
                       '"remote_addr": "$remote_addr", '
                       '"remote_user": "$remote_user", '
                       '"body_bytes_sent": "$body_bytes_sent", '
                       '"request_time": "$request_time", '
                       '"status": "$status", '
                       '"request": "$request", '
                       '"request_method": "$request_method", '
                       '"http_referrer": "$http_referer", '
                       '"http_user_agent": "$http_user_agent" } }';

  access_log /dev/stdout main;

  sendfile on;
  server_tokens off;

  # compression
  gzip on;
  gzip_comp_level 5;
  gzip_min_length 1000;
  gzip_proxied any;
  gzip_types application/atom+xml application/javascript application/json application/hal+json application/rss+xml application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/svg+xml image/x-icon text/css text/plain text/x-component text/xml  application/xml+rss text/javascript;
  gzip_vary on;

  # request sizes
  client_max_body_size 128M;

  # ssl from https://cipherli.st/
  ssl_protocols ${SSL_PROTOCOLS};
  ssl_prefer_server_ciphers on;
  ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
  ssl_ecdh_curve secp384r1;
  ssl_session_cache shared:SSL:10m;
  ssl_session_tickets off;
  ssl_stapling on;
  ssl_stapling_verify on;
  resolver 8.8.8.8 8.8.4.4 valid=300s;
  resolver_timeout 5s;
  #add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
  #add_header X-Frame-Options DENY;
  #add_header X-Content-Type-Options nosniff;

  # set source ip from CF-Connecting-IP header

  # kubernetes hides the cloudflare source ip behind a service, so inspecting those for CF-Connecting-IP header until kubernetes preserves the source ip
  set_real_ip_from 10.0.0.0/8;
  set_real_ip_from 172.16.0.0/12;
  set_real_ip_from 192.168.0.0/16;

  # from https://www.cloudflare.com/ips/
  set_real_ip_from 103.21.244.0/22;
  set_real_ip_from 103.22.200.0/22;
  set_real_ip_from 103.31.4.0/22;
  set_real_ip_from 104.16.0.0/12;
  set_real_ip_from 108.162.192.0/18;
  set_real_ip_from 131.0.72.0/22;
  set_real_ip_from 141.101.64.0/18;
  set_real_ip_from 162.158.0.0/15;
  set_real_ip_from 172.64.0.0/13;
  set_real_ip_from 173.245.48.0/20;
  set_real_ip_from 188.114.96.0/20;
  set_real_ip_from 190.93.240.0/20;
  set_real_ip_from 197.234.240.0/22;
  set_real_ip_from 198.41.128.0/17;
  set_real_ip_from 199.27.128.0/21;

  real_ip_header CF-Connecting-IP;

  # set whitelisting
  allow 10.0.0.0/8;
  allow 172.16.0.0/12;
  allow 192.168.0.0/16;
  ${ALLOW_CIDRS}
  deny all;

  # set proxy defaults
  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Host $host;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_http_version 1.1;

  # allow websocket connections
  map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
  }
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $connection_upgrade;

  # http traffic directly to k8s service
  server {
    listen 80;
    server_name ${SERVICE_NAME}
                ${SERVICE_NAME}.${NAMESPACE}
                ${SERVICE_NAME}.${NAMESPACE}.svc
                ${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local
                ${NAMESPACE}-${SERVICE_NAME}-internal.${DNS_ZONE}
                ~^\d+\.\d+\.\d+\.\d+$
                ;

    # custom timeouts
    client_body_timeout ${CLIENT_BODY_TIMEOUT};
    client_header_timeout ${CLIENT_HEADER_TIMEOUT};
    keepalive_timeout ${KEEPALIVE_TIMEOUT};
    keepalive_requests ${KEEPALIVE_REQUESTS};
    send_timeout ${SEND_TIMEOUT};
    proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
    proxy_send_timeout ${PROXY_SEND_TIMEOUT};
    proxy_read_timeout ${PROXY_READ_TIMEOUT};

    location / {
      proxy_pass http://${OFFLOAD_TO_HOST}:${OFFLOAD_TO_PORT};
    }
  }

  # http to https redirect for all other traffic
  server {
    listen 80 default_server;

    # custom timeouts
    client_body_timeout ${CLIENT_BODY_TIMEOUT};
    client_header_timeout ${CLIENT_HEADER_TIMEOUT};
    keepalive_timeout ${KEEPALIVE_TIMEOUT};
    keepalive_requests ${KEEPALIVE_REQUESTS};
    send_timeout ${SEND_TIMEOUT};
    proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
    proxy_send_timeout ${PROXY_SEND_TIMEOUT};
    proxy_read_timeout ${PROXY_READ_TIMEOUT};

    return 301 https://$host$request_uri;
  }

  # https
  server {
    listen 443 ssl http2;

    # custom timeouts
    client_body_timeout ${CLIENT_BODY_TIMEOUT};
    client_header_timeout ${CLIENT_HEADER_TIMEOUT};
    keepalive_timeout ${KEEPALIVE_TIMEOUT};
    keepalive_requests ${KEEPALIVE_REQUESTS};
    send_timeout ${SEND_TIMEOUT};
    proxy_connect_timeout ${PROXY_CONNECT_TIMEOUT};
    proxy_send_timeout ${PROXY_SEND_TIMEOUT};
    proxy_read_timeout ${PROXY_READ_TIMEOUT};

    ssl on;
    ssl_certificate /etc/ssl/private/ssl.pem;
    ssl_certificate_key /etc/ssl/private/ssl.key;
    ssl_trusted_certificate /etc/ssl/private/ssl.pem;

    location / {
      proxy_pass http://${OFFLOAD_TO_HOST}:${OFFLOAD_TO_PORT};
    }
  }

  # readiness
  server {
    listen 81;

    location /readiness {
      keepalive_timeout 0;
      access_log /dev/null;
      error_log /dev/null;

      proxy_pass http://${OFFLOAD_TO_HOST}:${OFFLOAD_TO_PORT}${HEALT_CHECK_PATH};
    }
  }

  # liveness
  server {
    listen 82;

    location /liveness {
      keepalive_timeout 0;
      access_log /dev/null;
      error_log /dev/null;

      add_header Content-Type text/plain;
      return 200;
    }
  }

  # prometheus
  server {
    listen ${PROMETHEUS_METRICS_PORT};

    location /metrics {
      access_log /dev/null;
      error_log /dev/null;

      content_by_lua 'prometheus:collect()';
    }
  }
}
